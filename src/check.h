/*
 * check.h
 *
 *  Created on: Dec 2, 2022
 *      Author: gege
 */

#ifndef CHECK_H_
#define CHECK_H_


#include <stdbool.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/pem.h>
#include <openssl/asn1.h>
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/x509_vfy.h>


enum {
	ERROR_OK,
	ERROR_CERTIFICATE_INVALID,
	ERROR_CRL_INVALID,
	ERROR_FILE_NOT_OPEN,
	ERROR_FILE_NOT_FOUND,
	ERROR_FILE_NOT_X509,
	ERROR_FILE_NOT_CRL,
	ERROR_FILE_NOT_PEM,
	ERROR_UNABLE_READ_EXPIRATION_DATE,
	ERROR_UNABLE_CHECK_DATE,
	ERROR_ISSUER_UNREADABLE,
	ERROR_SUBJECT_UNREADABLE,
	ERROR_CRL_CERTIFICATE_EXPIRED,
	ERROR_CERT_BAD_VERSION,
	ERROR_CERT_BAD_SIGN_ALGO,
	ERROR_CERT_BAD_ISSUER,
	ERROR_CERT_BAD_VALIDITY_PERIOD,
	ERROR_CERT_BAD_SUBJECT,
	ERROR_CERT_BAD_PUBKEY,
	ERROR_CERT_BAD_EXT,
	ERROR_CERT_BAD_AUTH_KEY_ID,
	ERROR_CERT_BAD_SUBJ_KEY_ID,
	ERROR_CERT_BAD_POLICIES,
	ERROR_CERT_BAD_BASIC_CONSTRAINTS,
	ERROR_CERT_BAD_SUBJ_ALT_NAME,
	ERROR_CERT_BAD_CRL_DIST_POINT,
	ERROR_CERT_BAD_AUTH_INFO_ACCESS,
	ERROR_CERT_NOT_ENOUGH_EXTENSION,
	ERROR_CERT_MISSING_SERIAL_NUMBER,
	ERROR_CERT_MISSING_START_DATE,
	ERROR_CERT_MISSING_STOP_DATE,
	ERROR_CERT_MISSING_KEY_USAGE,
	ERROR_CERT_MISSING_EXT_KEY_USAGE,
	ERROR_CERT_NOT_CRITICAL_KEY_USAGE,
	ERROR_CERT_UNEXPECTED_KEY_USAGE,
	ERROR_UNABLE_CREATE_CTX,
	ERROR_LOADING_CA_CHAIN,
	ERROR_CERT_NOT_VALID_CA_CHAIN,
	ERROR_DATE_FORMAT,
	ERROR_CONVERSION_DATE,
	ERROR_CERT_CERTIFICATE_EXPIRED,
	ERROR_UNABLE_TO_GET_ISSUE_DATE,
	ERROR_UNABLE_TO_CHECK_MID_LIFE,
	ERROR_CERT_NOT_YET_VALID,
	ERROR_CRL_NOT_YET_VALID,
	ERROR_CERT_REACHED_MID_LIFE,
	ERROR_CRL_REACHED_MID_LIFE,
	ERROR_UNABLE_CALCULATE_DIFF,
	ERROR_NO_EXTENSION_FOUND,
	ERROR_NOT_CHECKINGBASIC_CRL,
	ERROR_NOT_CHECKING_DISTRIBUTION_CRL,
	ERROR_MISSING_BASIC_CONSTRAIN,
	ERROR_MISSING_CRL_DISTRIBUTION_POINT,
	ERROR_CERT_TYPE_UNKNOW,
	ERROR_CRL_BAD_VERSION,
	ERROR_CRL_BAD_SIGN_ALGO,
	ERROR_CRL_BAD_ISSUER,
	ERROR_CRL_NOT_ENOUGH_EXTENSION,
	ERROR_CRL_NO_EXTENSION,
	ERROR_CRL_NO_REVOKED_EXTENSION,
	ERROR_CRL_NO_REVOKED_DATE,
	ERROR_CRL_NO_REVOKED_SN,
	ERROR_CRL_UNABLE_CA,
	ERROR_CRL_NO_PKEY_CA,
	ERROR_CRL_BAD_SIGNATURE,
	ERROR_NO_CA,
	ERROR_UNKNOW_COMMAND,

	ERROR_BIO_CANT_CREATE,
	ERROR_BAD_FINGERPRINT,
	ERROR_CANT_LOAD_TEMPLATE,
	ERROR_BAD_TEMPLATE,

	ERROR_COUNT
};

//const char ErrorSTR[ERROR_COUNT][100] = {
//		"ERROR_OK",
//		"ERROR_CERTIFICATE_INVALID",
//		"ERROR_CRL_INVALID",
//		"ERROR_FILE_NOT_OPEN",
//		"ERROR_FILE_NOT_FOUND",
//		"ERROR_FILE_NOT_X509",
//		"ERROR_FILE_NOT_CRL",
//		"ERROR_FILE_NOT_PEM",
//		"ERROR_UNABLE_READ_EXPIRATION_DATE",
//		"ERROR_UNABLE_CHECK_DATE",
//		"ERROR_ISSUER_UNREADABLE",
//		"ERROR_SUBJECT_UNREADABLE",
//		"ERROR_CRL_CERTIFICATE_EXPIRED",
//		"ERROR_CERT_BAD_VERSION",
//		"ERROR_CERT_BAD_SIGN_ALGO",
//		"ERROR_CERT_BAD_ISSUER",
//		"ERROR_CERT_BAD_VALIDITY_PERIOD",
//		"ERROR_CERT_BAD_SUBJECT",
//		"ERROR_CERT_BAD_PUBKEY",
//		"ERROR_CERT_BAD_EXT",
//		"ERROR_CERT_BAD_AUTH_KEY_ID",
//		"ERROR_CERT_BAD_SUBJ_KEY_ID",
//		"ERROR_CERT_BAD_POLICIES",
//		"ERROR_CERT_BAD_BASIC_CONSTRAINTS",
//		"ERROR_CERT_BAD_SUBJ_ALT_NAME",
//		"ERROR_CERT_BAD_CRL_DIST_POINT",
//		"ERROR_CERT_BAD_AUTH_INFO_ACCESS",
//		"ERROR_CERT_NOT_ENOUGH_EXTENSION",
//		"ERROR_CERT_MISSING_SERIAL_NUMBER",
//		"ERROR_CERT_MISSING_START_DATE",
//		"ERROR_CERT_MISSING_STOP_DATE",
//		"ERROR_CERT_MISSING_KEY_USAGE",
//		"ERROR_CERT_MISSING_EXT_KEY_USAGE",
//		"ERROR_CERT_NOT_CRITICAL_KEY_USAGE",
//		"ERROR_CERT_UNEXPECTED_KEY_USAGE",
//		"ERROR_UNABLE_CREATE_CTX",
//		"ERROR_LOADING_CA_CHAIN",
//		"ERROR_CERT_NOT_VALID_CA_CHAIN",
//		"ERROR_DATE_FORMAT",
//		"ERROR_CONVERSION_DATE",
//		"ERROR_CERT_CERTIFICATE_EXPIRED",
//		"ERROR_UNABLE_TO_GET_ISSUE_DATE",
//		"ERROR_UNABLE_TO_CHECK_MID_LIFE",
//		"ERROR_CERT_NOT_YET_VALID",
//		"ERROR_CRL_NOT_YET_VALID",
//		"ERROR_CERT_REACHED_MID_LIFE",
//		"ERROR_CRL_REACHED_MID_LIFE",
//		"ERROR_UNABLE_CALCULATE_DIFF",
//		"ERROR_NO_EXTENSION_FOUND",
//		"ERROR_NOT_CHECKINGBASIC_CRL",
//		"ERROR_NOT_CHECKING_DISTRIBUTION_CRL",
//		"ERROR_MISSING_BASIC_CONSTRAIN",
//		"ERROR_MISSING_CRL_DISTRIBUTION_POINT",
//		"ERROR_CERT_TYPE_UNKNOW",
//		"ERROR_CRL_BAD_VERSION",
//		"ERROR_CRL_BAD_SIGN_ALGO",
//		"ERROR_CRL_BAD_ISSUER",
//		"ERROR_CRL_NOT_ENOUGH_EXTENSION",
//		"ERROR_CRL_NO_EXTENSION",
//		"ERROR_CRL_NO_REVOKED_EXTENSION",
//		"ERROR_CRL_NO_REVOKED_DATE",
//		"ERROR_CRL_NO_REVOKED_SN",
//		"ERROR_CRL_UNABLE_CA",
//		"ERROR_CRL_NO_PKEY_CA",
//		"ERROR_CRL_BAD_SIGNATURE",
//		"ERROR_NO_CA",
//		"ERROR_UNKNOW_COMMAND",
//
//		"ERROR_BIO_CANT_CREATE",
//		"ERROR_BAD_FINGERPRINT",
//		"ERROR_CANT_LOAD_TEMPLATE",
//};


void display_hexa(uint8_t *before, uint8_t *after, uint8_t *buffer, size_t buffer_len);

bool isNumber(char *str);
#if 0
int32_t OpenX509_CRL_Certificate(FILE* chk_f, int chk_crl);
void CloseX509_CRL_Certificate(void);

int32_t	check_expiration_date(char * chk_date);
int32_t	check_expiration_mid_date( char * chk_date,  int32_t chk_life);
#endif
int32_t check_validity(X509_CRL *x509_crl, X509 *x509);
#if 0
int32_t check_extension( char *chk_extension);
int32_t check_basic_constraint(void);
int32_t check_crl_distribution_point(void);
#endif
int32_t check_fingerprint(const X509 *x509, char *Fpt_filename);
int32_t check_verify_CA(const X509 *x509 , STACK_OF(X509) *chain, int32_t *isroot, int32_t *isRA);
int32_t check_verify_cert(const X509 *x509, STACK_OF(X509) *certs) ;
int32_t check_verify_CRL(X509_CRL *x509_crl);

int32_t check_authenticated_CAfile(X509 *x509, const char * ca_bundlestr);
int32_t check_authenticated_chain(X509 *x509, STACK_OF(X509) *chain);
int32_t check_CA_inTA(const X509 *cert, const char * CADir);
int32_t verifyCRL( X509_CRL* crl, const char * ca_bundlestr );


#endif /* CHECK_H_ */
